
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- Users Collection ---
    // Users can read/write their own data.
    // Admins can read/write any user data.
    // Authenticated users can read public vendor profiles.
    match /users/{userId} {
      allow read: if request.auth != null && (isOwner(userId) || isAdmin() || resource.data.role == 'vendor');
      allow create: if request.auth != null; // Allow user creation during signup
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // --- Vendor Registrations Collection ---
    // Logged-in users can create a registration request for themselves.
    // Admins can read/update/delete any request.
    match /vendorRegistrations/{registrationId} {
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }

    // --- Categories Collection ---
    // Anyone authenticated can read categories.
    // Only admins can create/update/delete.
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // --- OTP Store ---
    // Lock this down. Only backend functions should interact with this.
    // The callable function will be invoked with the user's auth context,
    // so we can't completely lock it down from rules. We rely on the function's
    // internal logic for security. The rules here prevent malicious direct client access.
    match /otpStore/{mobileNumber} {
       allow write: if true; // Open for the function to write, which has its own security logic
       allow read, delete: if false; // No client should ever read or delete OTPs directly
    }

    // --- Commissions Collection ---
    // Admins can read/write everything.
    // Users can read commissions where they are the client, vendor, or referrer.
    match /commissions/{commissionId} {
      allow read: if isAdmin() || (request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.referrerId || request.auth.uid == resource.data.vendorId));
      allow write: if isAdmin(); // Only backend can create/update commissions
    }

    // --- Cash Transactions Collection ---
    // Vendors can create for themselves. Admins can read/write.
    // Clients can update their verification status.
    match /cashTransactions/{transactionId} {
        allow read: if isAdmin() || (request.auth != null && (request.auth.uid == resource.data.vendorId || request.auth.uid == resource.data.clientId));
        allow create: if request.auth != null && request.auth.uid == request.resource.data.vendorId;
        allow update: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.clientId); // for client verification
        allow delete: if isAdmin();
    }

    // --- Projects Collection ---
    // Admins can read/write everything.
    // Involved client/vendor can read/update.
    match /projects/{projectId} {
       allow read, update: if isAdmin() || (request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.vendorId));
       allow create, delete: if isAdmin();
    }

    // --- Client Referrals Collection ---
    // Logged-in users can create. Admins can manage.
    match /clientReferrals/{referralId} {
        allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.referrerClientId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.referrerClientId;
        allow update, delete: if isAdmin();
    }

    // --- Vendor Referrals Collection ---
    match /vendorReferrals/{referralId} {
        allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.referrerVendorId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.referrerVendorId;
        allow update, delete: if isAdmin();
    }

    // --- Other Collections ---

    // Clicks can be created by any authenticated user. Only admins can read/manage.
    match /vendorWebsiteClicks/{clickId} {
      allow create: if request.auth != null;
      allow read, update, delete: if isAdmin();
    }

    // Logs are written by backend functions, only readable by admins.
    match /smsNotificationLogs/{logId} {
        allow read: if isAdmin();
        allow write: if false;
    }

    // Messages can only be created and read by admins.
     match /messages/{messageId} {
        allow read, write: if isAdmin();
     }

     // Settings can only be managed by admins.
     match /settings/{settingId} {
        allow read, write: if isAdmin();
     }

     // Check-ins can be created by authenticated users (vendors scanning).
     // Readable by involved parties or admins.
     match /clientCheckins/{checkinId} {
         allow create: if request.auth != null;
         allow read: if isAdmin() || (request.auth != null && (request.auth.uid == resource.data.vendorId || request.auth.uid == resource.data.clientId));
         allow update: if isAdmin();
     }

     // Support tickets can be created by authenticated users.
     // Readable by the creator or an admin.
     match /supportTickets/{ticketId} {
        allow read: if isAdmin() || isOwner(resource.data.senderUid);
        allow create: if request.auth != null;
        allow update: if isAdmin();
     }
  }
}
